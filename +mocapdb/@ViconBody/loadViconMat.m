function obj = loadViconMat(fname, plugingait)   
	% Load mat file generated by parseViconCSV.py and return an instance of ViconBody class
	%
	% :param fname: mat file name
    % :param plugingait: reconstruct using Vicon's plugin gait model. If false, uses human body model that has been kinematically fit.
    % :type plugingait: Optional, Boolean. Defaults to true.
	%
	% :return: instance of ViconBody class.
	%
	% .. Author: - Luke Sy (UNSW GSBME)
    if nargin <= 1
        plugingait = true;
    end
    
    load(fname);
    
    %% Plugin gait model
    if plugingait
        obj = mocapdb.ViconBody('srcFileName', fname, 'posUnit', 'mm', ...
            'LFEP', LHJC(:, 1:3), 'LFEO', LKJC(:, 1:3), ...
            'LTIO', LAJC(:, 1:3), 'LTOE', LTOE(:, 1:3), ...
            'RFEP', RHJC(:, 1:3), 'RFEO', RKJC(:, 1:3), ...
            'RTIO', RAJC(:, 1:3), 'RTOE', RTOE(:, 1:3), ...
            'PELV', (RASI(:, 1:3)+LASI(:, 1:3))/2, 'fs', 100, 'frame', 'vicon');

        n = size(RASI); n = n(1);

        PELV_y = (LASI-RASI) ./ vecnorm(LASI-RASI, 2, 2);
        PELV_c = (RPSI-RASI);
        PELV_cIdx = any(isnan(PELV_c), 2);
        PELV_c(PELV_cIdx, :) = LPSI(PELV_cIdx, :) - RASI(PELV_cIdx, :);
        PELV_z = cross(PELV_y, PELV_c, 2);
        PELV_z = PELV_z ./ vecnorm(PELV_z, 2, 2);
        PELV_x = cross(PELV_y, PELV_z, 2);
        PELV_x = PELV_x ./ vecnorm(PELV_x, 2, 2);
        PELV_CS = zeros(3, 3, n);
        PELV_CS(:, 1, :) = reshape(PELV_x', 3, 1, n);
        PELV_CS(:, 2, :) = reshape(PELV_y', 3, 1, n);
        PELV_CS(:, 3, :) = reshape(PELV_z', 3, 1, n);
        obj.qRPV = rotm2quat(PELV_CS);

        LTHI_z = (obj.LFEP-obj.LFEO) ./ vecnorm(obj.LFEP-obj.LFEO, 2, 2);
        LTHI_c = (LKNE-obj.LFEO);
        LTHI_x = cross(LTHI_c, LTHI_z, 2);
        LTHI_x = LTHI_x ./ vecnorm(LTHI_x, 2, 2);
        LTHI_y = cross(LTHI_z, LTHI_x, 2);
        LTHI_y = LTHI_y ./ vecnorm(LTHI_y, 2, 2);
        LTHI_CS = zeros(3, 3, n);
        LTHI_CS(:, 1, :) = reshape(LTHI_x', 3, 1, n);
        LTHI_CS(:, 2, :) = reshape(LTHI_y', 3, 1, n);
        LTHI_CS(:, 3, :) = reshape(LTHI_z', 3, 1, n);
        obj.qLTH = rotm2quat(LTHI_CS);

        LSHK_z = (obj.LFEO-obj.LTIO) ./ vecnorm(obj.LFEO-obj.LTIO, 2, 2);
        LSHK_c = (LANK-obj.LTIO);
        LSHK_x = cross(LSHK_c, LSHK_z, 2);
        LSHK_x = LSHK_x ./ vecnorm(LSHK_x, 2, 2);
        LSHK_y = cross(LSHK_z, LSHK_x, 2);
        LSHK_y = LSHK_y ./ vecnorm(LSHK_y, 2, 2);
        LSHK_CS = zeros(3, 3, n);
        LSHK_CS(:, 1, :) = reshape(LSHK_x', 3, 1, n);
        LSHK_CS(:, 2, :) = reshape(LSHK_y', 3, 1, n);
        LSHK_CS(:, 3, :) = reshape(LSHK_z', 3, 1, n);
        obj.qLSK = rotm2quat(LSHK_CS);

        RTHI_z = (obj.RFEP-obj.RFEO) ./ vecnorm(obj.RFEP-obj.RFEO, 2, 2);
        RTHI_c = (obj.RFEO-RKNE);
        RTHI_x = cross(RTHI_c, RTHI_z, 2);
        RTHI_x = RTHI_x ./ vecnorm(RTHI_x, 2, 2);
        RTHI_y = cross(RTHI_z, RTHI_x, 2);
        RTHI_y = RTHI_y ./ vecnorm(RTHI_y, 2, 2);
        RTHI_CS = zeros(3, 3, n);
        RTHI_CS(:, 1, :) = reshape(RTHI_x', 3, 1, n);
        RTHI_CS(:, 2, :) = reshape(RTHI_y', 3, 1, n);
        RTHI_CS(:, 3, :) = reshape(RTHI_z', 3, 1, n);
        obj.qRTH = rotm2quat(RTHI_CS);

        RSHK_z = (obj.RFEO-obj.RTIO) ./ vecnorm(obj.RFEO-obj.RTIO, 2, 2);
        RSHK_c = (obj.RTIO-RANK);
        RSHK_x = cross(RSHK_c, RSHK_z, 2);
        RSHK_x = RSHK_x ./ vecnorm(RSHK_x, 2, 2);
        RSHK_y = cross(RSHK_z, RSHK_x, 2);
        RSHK_y = RSHK_y ./ vecnorm(RSHK_y, 2, 2);
        RSHK_CS = zeros(3, 3, n);
        RSHK_CS(:, 1, :) = reshape(RSHK_x', 3, 1, n);
        RSHK_CS(:, 2, :) = reshape(RSHK_y', 3, 1, n);
        RSHK_CS(:, 3, :) = reshape(RSHK_z', 3, 1, n);
        obj.qRSK = rotm2quat(RSHK_CS);

        % https://docs.vicon.com/display/Nexus29/Lower+body+kinematics#Lowerbodykinematics-Foot
        LFT_z = LTOE(:, 1:3) - LAJC(:, 1:3);
        LFT_z = LFT_z ./ vecnorm(LFT_z, 2, 2);
        LFT_c = LSHK_y;
        LFT_x = cross(LFT_c, LFT_z, 2);
        LFT_y = cross(LFT_z, LFT_x, 2);
        LFT_CS = zeros(3, 3, n);
        LFT_CS(:, 1, :) = reshape(LFT_x', 3, 1, n);
        LFT_CS(:, 2, :) = reshape(LFT_y', 3, 1, n);
        LFT_CS(:, 3, :) = reshape(LFT_z', 3, 1, n);
        obj.qLFT = rotm2quat(LFT_CS);

        % https://docs.vicon.com/display/Nexus29/Lower+body+kinematics#Lowerbodykinematics-Foot
        RFT_z = RTOE(:, 1:3) - RAJC(:, 1:3);
        RFT_z = RFT_z ./ vecnorm(RFT_z, 2, 2);
        RFT_c = RSHK_y;
        RFT_x = cross(RFT_c, RFT_z, 2);
        RFT_y = cross(RFT_z, RFT_x, 2);
        RFT_CS = zeros(3, 3, n);
        RFT_CS(:, 1, :) = reshape(RFT_x', 3, 1, n);
        RFT_CS(:, 2, :) = reshape(RFT_y', 3, 1, n);
        RFT_CS(:, 3, :) = reshape(RFT_z', 3, 1, n);
        obj.qRFT = rotm2quat(RFT_CS);

        obj.nSamples = n;
    else
        %% kinematically fit human body model
        n = size(Root,1);
        obj = mocapdb.ViconBody('srcFileName', fname, 'posUnit', 'mm', ...
            'PELV', Root(:,4:6), 'qRPV', vecd2quat(Root(:,1:3)), ...
            'LFEP', L_Femur(:,4:6), 'qLTH', vecd2quat(L_Femur(:,1:3)), ...
            'RFEP', R_Femur(:,4:6), 'qRTH', vecd2quat(R_Femur(:,1:3)), ...
            'LFEO', L_Tibia(:,4:6), 'qLSK', vecd2quat(L_Tibia(:,1:3)), ...
            'RFEO', R_Tibia(:,4:6), 'qRSK', vecd2quat(R_Tibia(:,1:3)), ...
            'LTIO', L_Foot(:,4:6), 'qLFT', vecd2quat(L_Foot(:,1:3)), ...
            'RTIO', R_Foot(:,4:6), 'qRFT', vecd2quat(R_Foot(:,1:3)), ...
            'LTOE', L_Toe(:,4:6), 'RTOE', R_Toe(:,4:6), ...
            'fs', 100, 'frame', 'vicon', 'nSamples', n );
        
        % adjust foot frame to biomedical convention
        % obj.qLFT = quatmultiply(obj.qLFT, axang2quat([0 1 0 pi/2]) );
        % obj.qRFT = quatmultiply(obj.qRFT, axang2quat([0 1 0 pi/2]) );
        
        % https://docs.vicon.com/display/Nexus29/Lower+body+kinematics#Lowerbodykinematics-Foot
        LFT_z = quat2rotm(obj.qLFT); LFT_z = squeeze(LFT_z(:,1,:))';
        LFT_c = quat2rotm(obj.qLSK); LFT_c = squeeze(LFT_c(:,2,:))';
        LFT_x = cross(LFT_c, LFT_z, 2);
        LFT_y = cross(LFT_z, LFT_x, 2);
        LFT_CS = zeros(3, 3, n);
        LFT_CS(:, 1, :) = reshape(LFT_x', 3, 1, n);
        LFT_CS(:, 2, :) = reshape(LFT_y', 3, 1, n);
        LFT_CS(:, 3, :) = reshape(LFT_z', 3, 1, n);
        obj.qLFT = rotm2quat(LFT_CS);

        % https://docs.vicon.com/display/Nexus29/Lower+body+kinematics#Lowerbodykinematics-Foot
        RFT_z = quat2rotm(obj.qRFT); RFT_z = squeeze(RFT_z(:,1,:))';
        RFT_c = quat2rotm(obj.qRSK); RFT_c = squeeze(RFT_c(:,2,:))';
        RFT_x = cross(RFT_c, RFT_z, 2);
        RFT_y = cross(RFT_z, RFT_x, 2);
        RFT_CS = zeros(3, 3, n);
        RFT_CS(:, 1, :) = reshape(RFT_x', 3, 1, n);
        RFT_CS(:, 2, :) = reshape(RFT_y', 3, 1, n);
        RFT_CS(:, 3, :) = reshape(RFT_z', 3, 1, n);
        obj.qRFT = rotm2quat(RFT_CS);
    end
end

function out = vecd2quat(x)
    out = zeros(size(x,1),4);
    YZX = [0 1 0; 0 0 1; 1 0 0];
    for i=1:size(x,1)
        out(i,:) = rotm2quat(vec2rot(deg2rad(x(i,:))')*YZX);
    end
end