function p = plotLowerBody(body, t, showOrientation, showGround)    
	% Plot the lower body using the joint positions
	% 
	% :param body: Body instance to be plotted
	% :param t: time point to be plotted
	% :param showOrientation: [Optional] show coordinate system of each body segment
	% :param showGround: [Optional] show ground
	%
	% :return: p - plot object
	%
	% .. Author: - Luke Sy (UNSW GSBME)

    if nargin <= 2
        showOrientation = false;
        showGround = false;
    end
    hold on;
    
    pelvL = line([body.LFEP(t,1) body.MIDPEL(t,1) body.RFEP(t,1)], ...
                 [body.LFEP(t,2) body.MIDPEL(t,2) body.RFEP(t,2)], ...
                 [body.LFEP(t,3) body.MIDPEL(t,3) body.RFEP(t,3)], ...
                 'Color', char(body.rplColor(2)), 'LineWidth', 2);
    pelvL.Marker = body.ptSymbol;
    lfemL = line([body.LFEP(t,1) body.LFEO(t,1)], ...
                 [body.LFEP(t,2) body.LFEO(t,2)], ...
                 [body.LFEP(t,3) body.LFEO(t,3)], ...
                 'Color', char(body.rplColor(3)), 'LineWidth', 2, ...
                 'LineStyle', '--');
    rfemL = line([body.RFEP(t,1) body.RFEO(t,1)], ...
                 [body.RFEP(t,2) body.RFEO(t,2)], ...
                 [body.RFEP(t,3) body.RFEO(t,3)], ...
                 'Color', char(body.rplColor(1)), 'LineWidth', 2, ...
                 'LineStyle', '--');
    
    if length(body.LTOE) > 0
        ltibL = line([body.LFEO(t,1) body.LTIO(t,1)], ...
                 [body.LFEO(t,2) body.LTIO(t,2)], ...
                 [body.LFEO(t,3) body.LTIO(t,3)], ...
                 'Color', char(body.rplColor(3)), 'LineWidth', 2, ...
                 'LineStyle', '--');
        ltibL.Marker = body.ptSymbol;
        lfooL = line([body.LTOE(t,1) body.LTIO(t,1)], ...
                     [body.LTOE(t,2) body.LTIO(t,2)], ...
                     [body.LTOE(t,3) body.LTIO(t,3)], ...
                     'Color', char(body.rplColor(3)), 'LineWidth', 2);
        lfooL.Marker = body.ptSymbol;
    else
        ltibL = line([body.LFEO(t,1) body.LTIO(t,1)], ...
                 [body.LFEO(t,2) body.LTIO(t,2)], ...
                 [body.LFEO(t,3) body.LTIO(t,3)], ...
                 'Color', char(body.rplColor(3)), 'LineWidth', 2);
        ltibL.Marker = body.ptSymbol;
    end
    if length(body.RTOE) > 0
        rfooL = line([body.RTOE(t,1) body.RTIO(t,1)], ...
                     [body.RTOE(t,2) body.RTIO(t,2)], ...
                     [body.RTOE(t,3) body.RTIO(t,3)], ...
                     'Color', char(body.rplColor(1)), 'LineWidth', 2);
        rfooL.Marker = body.ptSymbol;
        rtibL = line([body.RFEO(t,1) body.RTIO(t,1)], ...
                 [body.RFEO(t,2) body.RTIO(t,2)], ...
                 [body.RFEO(t,3) body.RTIO(t,3)],...
                 'Color', char(body.rplColor(1)), 'LineWidth', 2, ...
                 'LineStyle', '--');
        rtibL.Marker = body.ptSymbol;
    else
        rtibL = line([body.RFEO(t,1) body.RTIO(t,1)], ...
                 [body.RFEO(t,2) body.RTIO(t,2)], ...
                 [body.RFEO(t,3) body.RTIO(t,3)],...
                 'Color', char(body.rplColor(1)), 'LineWidth', 2);
        rtibL.Marker = body.ptSymbol;
    end
    
    if isempty(body.qLFT)
        qLFT2R = [];
    else
        qLFT2R = quat2rotm(body.qLFT);
    end
    
    if isempty(body.qRFT)
        qRFT2R = [];
    else
        qRFT2R = quat2rotm(body.qRFT);
    end
    
    if showOrientation
        if showOrientation == 1
            points = [ repmat(body.MIDPEL(t,:), [3, 1]); ...
                       repmat(body.LFEO(t,:), [3, 1]); ...
                       repmat(body.RFEO(t,:), [3, 1]); ...
                       repmat(body.LTIO(t,:), [3, 1]); ...
                       repmat(body.RTIO(t,:), [3, 1]); ...
                       repmat(body.LTOE(t,:), [3, 1]); ...
                       repmat(body.RTOE(t,:), [3, 1])];
        else
            points = [ repmat(body.MIDPEL(t,:), [3, 1]); ...
                       repmat((body.LFEO(t,:)+body.LFEP(t,:))/2, [3, 1]); ...
                       repmat((body.RFEO(t,:)+body.RFEP(t,:))/2, [3, 1]); ...
                       repmat((body.LFEO(t,:)+body.LTIO(t,:))/2, [3, 1]); ...
                       repmat((body.RFEO(t,:)+body.RTIO(t,:))/2, [3, 1]); ...
                       repmat((body.LTOE(t,:)+body.LTIO(t,:))/2, [3, 1]); ...
                       repmat((body.RTOE(t,:)+body.RTIO(t,:))/2, [3, 1]) ];
        end
        arrows = [ quat2rotm(body.qRPV(t, :))'; ...
                   quat2rotm(body.qLTH(t, :))'; ...
                   quat2rotm(body.qRTH(t, :))'; ...
                   quat2rotm(body.qLSK(t, :))'; ...
                   quat2rotm(body.qRSK(t, :))'; ...
                   qLFT2R'; qRFT2R'];
                   
        quiver3(points(1:3:end, 1), points(1:3:end, 2), points(1:3:end, 3), ...
                arrows(1:3:end, 1), arrows(1:3:end, 2), arrows(1:3:end, 3), ...
                body.axisScale, 'Color', char(body.xyzColor(1)), ...
                'LineWidth', 3);
        quiver3(points(2:3:end, 1), points(2:3:end, 2), points(2:3:end, 3), ...
                arrows(2:3:end, 1), arrows(2:3:end, 2), arrows(2:3:end, 3), ...
                body.axisScale, 'Color', char(body.xyzColor(2)), ...
                'LineWidth', 3);
        quiver3(points(3:3:end, 1), points(3:3:end, 2), points(3:3:end, 3), ...
                arrows(3:3:end, 1), arrows(3:3:end, 2), arrows(3:3:end, 3), ...
                body.axisScale, 'Color', char(body.xyzColor(3)), ...
                'LineWidth', 3);
    end
    if showGround
        [ptsX, ptsY, ptsZ] = body.groundCoordinates();
        patch(ptsX, ptsY, ptsZ, 'k', 'FaceAlpha', .5, 'LineStyle', ':')
    end
end